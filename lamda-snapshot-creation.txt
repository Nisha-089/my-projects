import boto3
import collections
import datetime
import os

ec = boto3.client('ec2')

def lambda_handler(event, context):
  
  aws_region = os.getenv('AWS_REGION')  
  
  instances = ec.describe_instances(
    Filters=[
      { 'Name': 'tag:Backup', 'Values': ['Yes'] },
    ]
  ).get(
    'Reservations', []
  )
  # Flatten the list of instances from [{"Instances":[i-1,i-2]},{"Instances":[i-3,i-4]}] to [i-1,i-2,i-3,i-4]
  instances = [item for sublist in instances for item in sublist['Instances']]
  
  print "Found %d instances that need backing up" % len(instances)

  for instance in instances:


    # Determine Retention Period Based Upon Tags
    retention_days = 7
    destination_region = None
    instance_name = ""
    for tag in instance['Tags']:
      if tag['Key'] == 'RetentionDays' and tag['Value'] > 0:
        retention_days = int(tag['Value'])

      if tag['Key'] == 'DestinationRegion' and len(tag['Value']) > 0:
        destination_region = tag['Value']

      if tag['Key'] == 'Name' and len(tag['Value']) > 0:
        instance_name = tag['Value']

    print "Setting SnapShot retention period To %s days" % (retention_days)

    delete_date = datetime.date.today() + datetime.timedelta(days=retention_days)
    delete_fmt = delete_date.strftime('%Y-%m-%d')
    create_date = datetime.date.today()
    create_fmt = create_date.strftime('%Y-%m-%d')

    snapshot_tags = [
      { 'Key': 'CreatedOn', 'Value': create_fmt },
      { 'Key': 'DeleteOn', 'Value': delete_fmt },
      { 'Key': 'Type', 'Value': 'Automated' },
      { 'Key': 'InstanceID', 'Value': instance['InstanceId'] },
      { 'Key': 'InstanceName', 'Value': instance_name },				  				  
    ]

    if destination_region != None:
      snapshot_tags = snapshot_tags + [{ 'Key': 'DestinationRegion', 'Value': destination_region }]

    for dev in instance['BlockDeviceMappings']:
      
      snapshot_required = True
      volume_name = None
      
      if dev.get('Ebs', None) is None:
        continue
      vol_id = dev['Ebs']['VolumeId']
      dev_name = dev['DeviceName']
      
      volume = ec.describe_volumes(
        VolumeIds=[vol_id,]
      )['Volumes'][0]         

      description = '%s - %s (%s)' % ( 
        instance_name, 
        vol_id, 
        dev_name 
      )     

      snapshot_tags = snapshot_tags + [{ 'Key': 'Name', 'Value': description }]				  
      snapshot_tags = snapshot_tags + [{ 'Key': 'VolumeID', 'Value': vol_id }]
      snapshot_tags = snapshot_tags + [{ 'Key': 'DeviceName', 'Value': dev_name }]				
      
      if 'Tags' in volume:
        for tag in volume['Tags']:
          
          if tag['Key'] == 'Backup' and tag['Value'] == 'No':
            snapshot_required = False            
          
          if tag['Key'] == 'Name':
            description = tag['Value']

            
      if snapshot_required == False:
        print "\tIgnoring EBS volume %s (%s) on instance %s - 'Backup' Tag set to 'No'" % (
          vol_id, 
          dev_name, 
          instance['InstanceId']
        )

        continue
      
      print "\tFound EBS volume %s (%s) on instance %s - Proceeding with SnapShot" % (
        vol_id, 
        dev_name, 
        instance['InstanceId']
      )         
        
      snap = ec.create_snapshot(
        VolumeId=vol_id, 
        Description=description
      )
      
      if not (snap):
        print "\t\tSnapShot operation failed!"
        continue

      print "\t\tSnapshot %s created in %s of [%s]" % ( 
        snap['SnapshotId'], 
        aws_region, 
        description 
      )       
      
      print "\t\tRetaining snapshot %s of volume %s from instance %s (%s) for %d days" % (
        snap['SnapshotId'],
        vol_id,
        instance['InstanceId'],
        instance_name,
        retention_days,
      )

      ec.create_tags(
        Resources=[snap['SnapshotId']],
        Tags=snapshot_tags
      )
